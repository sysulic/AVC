; ADD (transitive_closure (above,on))
; means:predicate 'above' is transitive_closure of predicate 'on'.
; will be used in describe high level action with low level language 
(define (domain blocks_clear)
  (:requirements :strips :equality :typing :transitive_closure)
  (:types BlockType)
  (:predicates 
            (arm_empty)
            (clear ?x - BlockType)
            (on_table ?x - BlockType)
            (holding ?x - BlockType)
            (on ?x ?y - BlockType))
 (:transitive_closure (above,on))

 (:action pickup
  :parameters (?x - BlockType)
  :precondition (and (clear ?x) (on_table ?x) (arm_empty))
  :effect (and (holding ?x) (not (clear ?x)) (not (on_table ?x)) 
               (not (arm_empty))))

(:action putdown
  :parameters  (?x - BlockType)
  :precondition (holding ?x)
  :effect (and (clear ?x) (arm_empty) (on_table ?x) 
               (not (holding ?x))))

(:action stack
  :parameters  (?x ?y - BlockType)
  :precondition (and (clear ?y) (holding ?x))
  :effect (and (arm_empty) (clear ?x) (on ?x ?y)
               (not (clear ?y)) (not (holding ?x))))

(:action unstack
  :parameters  (?x ?y - BlockType)
  :precondition (and (on ?x ?y) (clear ?x) (arm_empty))
  :effect (and (holding ?x) (clear ?y)
               (not (on ?x ?y)) (not (clear ?x)) (not (arm_empty)))))